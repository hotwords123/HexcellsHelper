diff --git a/Assembly-CSharp.csproj b/Assembly-CSharp.csproj
index 7aa9e25..8466fd6 100644
--- a/Assembly-CSharp.csproj
+++ b/Assembly-CSharp.csproj
@@ -5,8 +5,9 @@
     <TargetFramework>net35</TargetFramework>
   </PropertyGroup>
   <PropertyGroup>
-    <LangVersion>12.0</LangVersion>
+    <LangVersion>latest</LangVersion>
     <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
+    <DefineConstants>ASM_PATCH</DefineConstants>
   </PropertyGroup>
   <PropertyGroup />
   <ItemGroup />
diff --git a/GameManagerScript.cs b/GameManagerScript.cs
index 29875a3..9a18957 100644
--- a/GameManagerScript.cs
+++ b/GameManagerScript.cs
@@ -96,6 +96,7 @@ public class GameManagerScript : MonoBehaviour
 		}
 		CheckInitialStartUp();
 		GameObject.Find("Fader").GetComponent<FaderScript>().FadeInAudio();
+		HexcellsHelper.Plugin.Init(gameObject);
 	}
 
 	private void CheckInitialStartUp()
diff --git a/HexBehaviour.cs b/HexBehaviour.cs
index 76bebbe..d908836 100644
--- a/HexBehaviour.cs
+++ b/HexBehaviour.cs
@@ -63,6 +63,10 @@ public class HexBehaviour : MonoBehaviour
 
 	private void OnMouseOver()
 	{
+		if (!enabled)
+		{
+			return;
+		}
 		if (Input.GetMouseButtonDown(0))
 		{
 			if (!mouseButtonsInverted)
@@ -107,6 +111,7 @@ public class HexBehaviour : MonoBehaviour
 			}
 			Object.Destroy(particleSystem.gameObject, 3f);
 			Object.Destroy(base.gameObject);
+			HexcellsHelper.EventManager.OnDestroyClick(this);
 		}
 		else
 		{
@@ -131,6 +136,7 @@ public class HexBehaviour : MonoBehaviour
 				musicDirector.PlayNoteA(base.transform.position.x / 7.04f);
 			}
 			iTween.ScaleTo(base.gameObject, iTween.Hash("scale", Vector3.zero, "time", 0.3f, "oncomplete", "DestroyThis"));
+			HexcellsHelper.EventManager.OnHighlightClick(this);
 		}
 		else
 		{
diff --git a/LevelCompleteScriptLevelGen.cs b/LevelCompleteScriptLevelGen.cs
index ad37b60..b1f6b33 100644
--- a/LevelCompleteScriptLevelGen.cs
+++ b/LevelCompleteScriptLevelGen.cs
@@ -66,6 +66,14 @@ public class LevelCompleteScriptLevelGen : MonoBehaviour
 		{
 			GameObject.Find("Music Director(Clone)").GetComponent<MusicDirector>().PlayPuzzleComplete();
 		}
+		HexcellsHelper.LevelGenHistoryManager.AddEntry(new HexcellsHelper.LevelGenHistoryEntry
+		{
+			timestamp = System.DateTimeOffset.Now.ToString("o"),
+			difficulty = HexcellsHelper.GameObjectUtil.GetOptionsManager().currentOptions.levelGenHardModeActive ? "hard" : "easy",
+			seed = HexcellsHelper.GameObjectUtil.GetGameManager().seedNumber,
+			mistakes = mistakes,
+			timeTaken = timer,
+		});
 	}
 
 	private void SetupMenu(int mistakes)
diff --git a/LevelGenerator.cs b/LevelGenerator.cs
index 947f484..d18867a 100644
--- a/LevelGenerator.cs
+++ b/LevelGenerator.cs
@@ -125,6 +125,7 @@ public class LevelGenerator : MonoBehaviour
 			GenerateLevelShapeHourglass();
 		}
 		SetupLevel();
+		HexcellsHelper.EventManager.TriggerLevelLoaded();
 	}
 
 	private void GenerateRandomSeedNumber()
diff --git a/MenuLogic.cs b/MenuLogic.cs
index 8b35291..d42ef13 100644
--- a/MenuLogic.cs
+++ b/MenuLogic.cs
@@ -121,6 +121,12 @@ public class MenuLogic : MonoBehaviour
 	{
 		if (Input.GetKeyDown(KeyCode.Escape))
 		{
+			var historyScreen = HexcellsHelper.LevelGenHistoryScreen.Instance;
+			if (historyScreen != null && historyScreen.IsScreenActive)
+			{
+				historyScreen.ExitScreen();
+				return;
+			}
 			if (mainCamera.transform.position.y < -20f)
 			{
 				gameManagerScript.GetComponent<OptionsManager>().SaveToJSONFile();
diff --git a/OldLevelGenerator.cs b/OldLevelGenerator.cs
index ed77ecc..0c9deaf 100644
--- a/OldLevelGenerator.cs
+++ b/OldLevelGenerator.cs
@@ -109,6 +109,7 @@ public class OldLevelGenerator : MonoBehaviour
 		}
 		SetupLevel();
 		SolvePuzzle();
+		HexcellsHelper.EventManager.TriggerLevelLoaded();
 	}
 
 	private void GenerateRandomSeedNumber()
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..ce1227d
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,54 @@
+## A streamlined .gitignore for modern .NET projects
+## including temporary files, build results, and
+## files generated by popular .NET tools. If you are
+## developing with Visual Studio, the VS .gitignore
+## https://github.com/github/gitignore/blob/main/VisualStudio.gitignore
+## has more thorough IDE-specific entries.
+##
+## Get latest from https://github.com/github/gitignore/blob/main/Dotnet.gitignore
+
+# Build results
+[Dd]ebug/
+[Dd]ebugPublic/
+[Rr]elease/
+[Rr]eleases/
+x64/
+x86/
+[Ww][Ii][Nn]32/
+[Aa][Rr][Mm]/
+[Aa][Rr][Mm]64/
+bld/
+[Bb]in/
+[Oo]bj/
+[Ll]og/
+[Ll]ogs/
+
+# .NET Core
+project.lock.json
+project.fragment.lock.json
+artifacts/
+
+# ASP.NET Scaffolding
+ScaffoldingReadMe.txt
+
+# NuGet Packages
+*.nupkg
+# NuGet Symbol Packages
+*.snupkg
+
+# Others
+~$*
+*~
+CodeCoverage/
+
+# MSBuild Binary and Structured Log
+*.binlog
+
+# MSTest test Results
+[Tt]est[Rr]esult*/
+[Bb]uild[Ll]og.*
+
+# NUnit
+*.VisualState.xml
+TestResult.xml
+nunit-*.xml
